alias password='openssl rand -base64 64 | head -c 64'

# vim
if which nvim > /dev/null; then
	alias vim=nvim
fi

vi() {
	vim $@
}

v() {
	if [[ $# -gt 1 ]]; then
		vi -p $@
	else
		vi $@
	fi
}

# IP addresses
alias ip="dig +short txt ch whoami.cloudflare @1.0.0.1"

# ls aliases
alias ls='ls -G'
alias l='ls -1'
alias ll='l -lh'
alias la='l -a'
alias lla='ll -a'

# Show history
alias history='fc -l 1'

# CD Aliases
take() { mkdir $1 && cd $1; }
cd() { builtin cd "$@" && ls; }
alias cd.='cd ~/.josh'

alias e='$EDITOR'
alias e.='$EDITOR ~/bin/dotfiles'

# File search
alias pt='pt --color --group'
alias less='less -FRX'

alias k='kubectl'
alias kx='f() { [ "$1" ] && kubectl config use-context $1 || kubectl config current-context ; } ; f'
alias kn='f() { [ "$1" ] && kubectl config set-context --current --namespace $1 || kubectl config view --minify | grep namespace | cut -d" " -f6 ; } ; f'
alias kxc="kubectl config unset current-context"

# gpg
secret () {
	output=~/"${1}".$(date +%s).enc
	gpg --encrypt --armor --output ${output} -r 0xA48474C1A09D8C23 "${1}" && echo "${1} -> ${output}"
}
reveal () {
	output=$(echo "${1}" | rev | cut -c16- | rev)
	gpg --decrypt --output ${output} "${1}" && echo "${1} -> ${output}"
}

getcert() {
	openssl s_client -connect $1:443 -servername $1 < /dev/null | openssl x509 -noout -text
}

# Git
alias g='git'
alias ga='git add'
alias gap='ga -p'
alias gau='git add -u'
gbi() {
	git bisect start
	git bisect bad
	git checkout HEAD~10
	git bisect good
	git bisect run "$@"
}
alias gbr='git branch -v'
alias gc='git commit -v'
alias gca='gc -a'
alias gcam='gca --amend'
alias gsc='gc --gpg-sign --allow-empty'
alias gch='git cherry-pick'
alias gcm='git commit -v --amend'
alias gco='git checkout'
alias gcop='gco -p'
alias gd='git diff -M --color'
alias gdc='git diff --cached -M'
alias gf='git fetch'
alias glog='git log --pretty="format:%C(auto)%h%d %s - %C(cyan)%an%C(white), %ar %C(blue)%G? %C(green)%GK %C(reset)"'
alias gl='glog --graph'
alias gla='gl --all'
alias gm='git merge --no-ff'
alias gmf='git merge --ff-only'
alias gms='git merge --squash'
alias gp='git push'
alias gpt='gp --tags'
alias gpr='gp && gh pr create'
alias gr='git reset'
alias grb='git rebase -p'
alias grbc='git rebase --continue'
alias grbi='git rebase -i'
alias grh='git reset --hard'
alias grp='gr --patch'
alias grsh='git reset --soft HEAD~'
alias grv='git remote -v'
alias gs='git status -sb'
alias gsup='git submodule update --remote --merge'
gup() {
	if [[ $(git status --porcelain --untracked-files=no) ]]; then
		git stash
		git pull --rebase=merges
		git submodule update --init --recursive
		git stash pop
	else
		git pull --rebase=merges
		git submodule update --init --recursive
	fi
}
gparent() {
	branch=$(git rev-parse --abbrev-ref HEAD)
	git show-branch -a 2>/dev/null | grep '\*' | grep -v "$branch" | head -n1 | sed 's/.*\[\(.*\)\].*/\1/' | sed 's/[\^~].*//'
}
grbu() {
	git fetch
	git rebase $(git remote)/$(gparent)
}

function s() {
	if is_svn_repo; then
		svn stat --ignore-externals
	elif is_git_repo; then
		git status -sb $@
	fi
}

function d() {
	if is_svn_repo; then
		svn diff $@ | colordiff | less -R
	elif is_git_repo; then
		gd $@
	fi
}

is_git_repo() {
	git rev-parse --git-dir &> /dev/null
}
is_svn_repo() {
	svn info &> /dev/null
}
